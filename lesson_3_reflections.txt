When would you want to use a remote repository rather than keeping all your work local?
When you want to collaborate on a project by making the source code of what you have done available to people, i.e. for open source projects. The other use proprietary storage for company's projects at one place. This one is private and there is no public access. 
a third use might be for individuals wanting to secure their code by storing it on web. 

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
because you simply might not want those changes to take effect in your file yet. They may be committed from a different person or a from a different computer, which might interfere with your current progress. 

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Suppose A has shared his source code for a project on GitHub. If B wants to work on it too, he will fork it to get it on his own GitHub profile. By doing so he will not be able to make changes to the original version shared on A's profile. He is just cloning it directly to GitHub. Later if he wants to make changes to the code, he will have to clone it to his own computer. If he wants to test a new feature while working on a main thing, he can create a branch which later can be merged. If it works out and he wants to push these changes to GitHub, the changes can only be made on his forked copy. 

What is the benefit of having a copy of the last known state of the remote stored locally?
1)when you are going to work offline, you can fetch last known state of remote stored locally, and can merge the two files if you wish to. 
2)you can git diff to see what changes you have made since you cloned the repo or fetched it.  

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
As I see it, it must be really hard to to collaborate without github or git. 
*we will have to keep track of all the changes that we each of us make individually. So, we can keep track all our individual changes in a linear format with accompanied by a small description
we try to keep each change restricted to one logical change. 
*when combining two different version of different paths, we compare the two and the original when the two diverged. 
*in all, we use the various strategies used in git and github but carrying them out them ourselves. 
this would be really hard and inefficient and it would take major chunk of our time.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
If I am working in a collaborative environment and I am not sure if a particular feature is going to work out, I will start it out on a new branch and make changes from master to this new branch until it is done. This will prevent master to be broken since other people will be working on it too, So I don't want that. 
Later I can issue a pull request to merge this change into the master. 
Other advantage is that, when there are too many people involved, they may want to work on something that they believe in so branches open up that option by providing them with the same resource at their discretion. 
